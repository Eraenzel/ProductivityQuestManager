@page "/tracker"
@rendermode InteractiveServer
@using ProductivityQuestManager.Data
@inject TaskManagerService TaskService
@implements IDisposable

<h3 class="text-lg font-semibold mb-2">⏱ Time Tracker</h3>

@* --- live tracking section; only visible while a timer is running --- *@
@if (TaskService.ActiveTimer != null && TaskService.ActiveTimer.LastCompletedAt == null)
{
    <div class="mb-4 p-4 bg-yellow-100 rounded flex items-center space-x-4">
        <div class="flex-1">
            <strong>Tracking:</strong>
            @TaskService.ActiveTimer.Title
        </div>
        <div class="font-mono">
            
        </div>
        <button class="btn btn-danger" @onclick="StopTracking">■ Stop</button>
    </div>
}

<div class="flex items-center space-x-2 mb-4">

    @* Description field *@
    @if (!IsEditing)
    {
        <input type="text"
               class="border p-2 rounded w-64"
               placeholder="Description…"
               @bind="newDescription" />
    }
    else
    {
        <input type="text"
               class="border p-2 rounded w-64"
               placeholder="Edit description…"
               @bind="editDescription" />
    }

    @* Tag picker *@
    <input type="text"
           list="tag-options"
           class="border p-2 rounded"
           placeholder="Add or select tag…"
           @bind="tagInput" />
    <datalist id="tag-options">
        @foreach (var t in allTags)
        {
            <option value="@t.Name" />
        }
    </datalist>
    <button class="px-2 py-1 bg-gray-200 rounded" @onclick="AddTag">+ Tag</button>

    @* Chips of selected tags *@
    @foreach (var t in selectedTags)
    {
        <span class="inline-flex items-center bg-blue-200 text-blue-800 px-2 py-0.5 rounded mr-1 text-xs">
            @t.Name
            <button class="ml-1 text-xs" @onclick="() => RemoveTag(t)">×</button>
        </span>
    }

    @* Start vs. Save/Cancel *@
    @if (!IsEditing)
    {
        <button class="px-4 py-2 bg-blue-600 text-white rounded" @onclick="StartTracking">
            ▶ Start
        </button>
    }
    else
    {
        <button class="px-4 py-2 bg-green-600 text-white rounded" @onclick="() => SaveEdit(editingId.Value)">
            💾 Save
        </button>
        <button class="px-4 py-2 bg-gray-300 text-black rounded" @onclick="CancelEdit">
            Cancel
        </button>
    }

</div>


@* Inline Edit Form *@
@if (!string.IsNullOrEmpty(saveError))
{
    <p class="text-red-600 font-semibold">@saveError</p>
}

<h4 class="mt-6">Recent Entries</h4>
<ul class="space-y-2">
    @foreach (var e in TaskService.GetRecentEntries())
    {
        <li class="border p-2 rounded bg-gray-50">
            <div class="flex justify-between">
                <span>@(e.Title ?? e.Title)</span> –
                <span>

                    @(e.DurationMinutes.ToString(@"hh\:mm\:ss") ?? "...")
            </span>

                @foreach (var tet in e.TaskTags)
                {
                    <span class="inline-block bg-blue-200 text-blue-800 px-2 py-0.5 rounded mr-1 text-xs">
                        @tet.Tag.Name
                    </span>
                }
            </div>
            <div class="text-xs text-gray-600">
                @e.StartedAt
                @(e.LastCompletedAt.HasValue ? $"– {e.LastCompletedAt.Value.ToLocalTime()}" : "")
            </div>
            <button class="text-xs text-blue-600" @onclick="() => BeginEdit(e)">Edit</button>
        </li>
    }
</ul>

@code {
    private string newDescription = "";
    private string tagInput = "";
    private List<Tag> allTags = new();
    private List<Tag> selectedTags = new();

    private int? editingId;
    private bool IsEditing => editingId.HasValue;

    private string editDescription = "";
    private string editStartLocal = "";
    private string editStopLocal = "";
    private string saveError = "";

    private System.Timers.Timer? _uiTimer;

    protected override void OnInitialized()
    {
        allTags = TaskService.GetAllTags();
        TaskService.OnChange += StateHasChanged;

        _uiTimer = new System.Timers.Timer(1000);
        _uiTimer.Elapsed += (_, __) =>
        {
            if (TaskService.ActiveTimer?.LastCompletedAt == null)
                InvokeAsync(StateHasChanged);
        };
    }

    private void StartTracking()
    {
        //TaskService.StartTimer(newDescription);
        if (TaskService.ActiveTimer != null && selectedTags.Any())
            TaskService.AssignTagsToTask(TaskService.ActiveTimer.Id, selectedTags.Select(t => t.Name));
        newDescription = "";
        selectedTags.Clear();
        _uiTimer?.Start();
    }

    private void StopTracking()
    {
        TaskService.CancelActiveTask();
        _uiTimer?.Stop();
    }

    private void AddTag()
    {
        var name = tagInput?.Trim();
        if (string.IsNullOrEmpty(name)) return;

        TaskService.AddTagIfNotExists(name);
        allTags = TaskService.GetAllTags();

        var tag = allTags.FirstOrDefault(t => t.Name == name);
        if (tag != null && selectedTags.All(t => t.Id != tag.Id))
            selectedTags.Add(tag);

        tagInput = "";
    }

    private void RemoveTag(Tag t) => selectedTags.Remove(t);

    private void BeginEdit(TaskModel e)
    {
        editingId = e.Id;
        editDescription = e.Title;
        editStartLocal = e.StartedAt?.ToString("yyyy-MM-ddTHH:mm");
        editStopLocal = e.LastCompletedAt?.ToString("yyyy-MM-ddTHH:mm") ?? "";
        saveError = "";
        selectedTags = e.TaskTags.Select(t => t.Tag).ToList();
    }

    private void CancelEdit()
    {
        editingId = null;
        selectedTags.Clear();
    } 

    private void SaveEdit(int id)
    {
        var entry = TaskService.GetRecentEntries().FirstOrDefault(x => x.Id == id);
        if (entry == null) return;

        var newStart = DateTime.Parse(editStartLocal);
        DateTime? newStop = string.IsNullOrWhiteSpace(editStopLocal)
            ? null
            : DateTime.Parse(editStopLocal);

        if (newStop.HasValue && (newStop - newStart) > TimeSpan.FromDays(1))
        {
            saveError = "❌ Duration cannot exceed 24 hours.";
            return;
        }

        saveError = "";
        TaskService.UpdateEntry(id, editDescription, newStart, newStop);
        TaskService.AssignTagsToTask(id, selectedTags.Select(t => t.Name));
        editingId = null;
        selectedTags.Clear();
    }

    public void Dispose()
    {
        TaskService.OnChange -= StateHasChanged;
        _uiTimer?.Stop();
        _uiTimer?.Dispose();
    }
}

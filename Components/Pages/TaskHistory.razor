@page "/history"
@rendermode InteractiveServer
@using ProductivityQuestManager.Data
@using Microsoft.EntityFrameworkCore;
@inject AppDbContext Db

<h2 class="text-xl font-bold mb-4">🕘 Task History</h2>

@* Calendar heatmap view for the past 30 days *@
<div class="mb-6 p-4 bg-gray-100 rounded">
    <h3 class="text-lg font-semibold mb-2">📅 Activity Calendar</h3>
    @if (Weeks == null || !Weeks.Any())
    {
        <p class="text-sm text-gray-500">No calendar data to display.</p>
    }
    else
    {
        <!-- Debug counter -->
        <p class="text-xs text-gray-400">Days generated: @CalendarDays.Count</p>
        <!-- Calendar table -->
        <table class="w-full table-fixed text-xs text-center border-collapse mb-2">
            <thead>
                <tr>
                    <th class="p-1">Mon</th>
                    <th class="p-1">Tue</th>
                    <th class="p-1">Wed</th>
                    <th class="p-1">Thu</th>
                    <th class="p-1">Fri</th>
                    <th class="p-1">Sat</th>
                    <th class="p-1">Sun</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in Weeks)
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            var cls = GetIntensity(day.Count);
                            <td class="p-1">
                                <div class="w-6 h-6 mx-auto rounded border border-gray-400 @cls"
                                     title="@day.Date.ToString("yyyy-MM-dd"): @day.Count entries">
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<h3 class="text-xl font-bold mb-4">🕘 Task History</h3>
@if (questResults == null)
{
    <p>Loading...</p>
}
else if (!questResults.Any())
{
    <p>No completed tasks yet.</p>
}
else
{
    var displayCount = showAll ? questResults.Count : Math.Min(5, questResults.Count);
    <ul class="space-y-3">
        @foreach (var result in questResults.Take(displayCount))
        {
            <li class="border p-3 rounded bg-white shadow">
                <strong>@result.Quest?.Name</strong><br />
                Unit: @result.Unit?.Name<br />
                XP: @result.ExperienceGained<br />
                Completed: @result.CompletedAt.ToLocalTime().ToString("g")<br />
                Outcome: @result.OutcomeSummary
            </li>
        }
    </ul>
    @if (questResults.Count > 5)
    {
        <button class="mt-4 px-4 py-2 bg-blue-500 text-white rounded" @onclick="ToggleShowAll">
            @(showAll ? "Show Less" : "Show All")
        </button>
    }
}

@code {
    private List<QuestResult>? questResults;
    private bool showAll = false;
    private List<CalendarDay> CalendarDays = new();
    private List<List<CalendarDay>> Weeks = new();

    protected override void OnInitialized()
    {
        questResults = Db.QuestResults
            .Include(q => q.Unit)
            .Include(q => q.Quest)
            .OrderByDescending(q => q.CompletedAt)
            .ToList();

        BuildCalendar();
    }

    private void ToggleShowAll() => showAll = !showAll;

    private void BuildCalendar()
    {
        var end = DateTime.Today;
        var start = end.AddDays(-29);
        // Compute all days
        CalendarDays.Clear();
        for (var d = start; d <= end; d = d.AddDays(1))
        {
            CalendarDays.Add(new CalendarDay { Date = d });
        }
        // Fetch counts
        var allResults = Db.QuestResults.ToList();
        var counts = allResults
            .Where(q => q.CompletedAt.Date >= start && q.CompletedAt.Date <= end)
            .GroupBy(q => q.CompletedAt.Date)
            .ToDictionary(g => g.Key, g => g.Count());
        foreach (var day in CalendarDays)
        {
            if (counts.TryGetValue(day.Date, out var cnt))
                day.Count = cnt;
            else
                day.Count = 0;
        }

        // Build weeks aligned Monday
        Weeks.Clear();
        var week = new List<CalendarDay>();
        // Pad first week until Monday
        var firstWeekday = ((int)CalendarDays[0].Date.DayOfWeek + 6) % 7; // Monday=0
        for (int i = 0; i < firstWeekday; i++)
            week.Add(new CalendarDay { Date = default(DateTime), Count = -1 });

        foreach (var day in CalendarDays)
        {
            week.Add(day);
            if (week.Count == 7)
            {
                Weeks.Add(week);
                week = new List<CalendarDay>();
            }
        }
        // Pad last week
        while (week.Count < 7)
            week.Add(new CalendarDay { Date = default(DateTime), Count = -1 });
        Weeks.Add(week);
    }

    private string GetIntensity(int count)
    {
        if (count < 0) return "bg-transparent";
        return count switch
        {
            0 => "bg-gray-300",
            1 => "bg-green-300",
            >= 5 => "bg-green-700",
            >= 3 => "bg-green-600",
            _ => "bg-green-500"
        };
    }

    private class CalendarDay
    {
        public DateTime Date { get; set; }
        public int Count { get; set; }
    }
}

@page "/history"
@rendermode InteractiveServer
@using ProductivityQuestManager.Data
@using Microsoft.EntityFrameworkCore;
@inject TaskManagerService TaskService
@inject AppDbContext Db

<h2 class="text-xl font-bold mb-4">🕘 Task History</h2>

@* Calendar heatmap view for the past 30 days *@
<div class="mb-6 p-4 bg-gray-100 rounded">
    <h3 class="text-lg font-semibold mb-2">📅 Activity Calendar</h3>
    @if (Weeks == null || !Weeks.Any())
    {
        <p class="text-sm text-gray-500">No calendar data to display.</p>
    }
    else
    {
        <!-- Calendar table -->
        <table class="w-full table-fixed text-xs text-center border-collapse mb-2">
            <thead>
                <tr>
                    <th class="p-1">Mon</th>
                    <th class="p-1">Tue</th>
                    <th class="p-1">Wed</th>
                    <th class="p-1">Thu</th>
                    <th class="p-1">Fri</th>
                    <th class="p-1">Sat</th>
                    <th class="p-1">Sun</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in Weeks)
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            var color = GetColor(day.Count);
                            var cls = GetIntensity(day.Count);
                            var txtCol = day.Count >= 3 ? "#fff" : "#111";
                            var isToday = day.Date.Date == DateTime.Today;
                            var borderCol = isToday ? "#2563EB" /* blue-600 */ : "#9CA3AF" /* gray-400 */;
                            var borderSize = isToday ? "2px" : "1px";

                            <td class="p-1">
                                <div class="calendar-cell" style="
                                width:2rem;
                                height:2rem;
                                display:flex;
                                align-items:center;
                                justify-content:center;
                                border: @borderSize solid @borderCol;
                                border-radius:0.5rem;
                                background-color:@color;
                                color:@txtCol;
                                font-size:0.75rem;
                                font-weight:bold;"
									 title="@(day.Count < 0 ? "" : $"{day.Date:yyyy-MM-dd}: {day.Count} entries")">
                                     @if (day.Count >= 0)
                                     {
                                         @day.Date.Day
                                     }                                   
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<h3 class="text-xl font-bold mb-4">🕘 Task History</h3>
<div class="flex space-x-4 mb-4">
    <label>
        From:
        <InputDate @bind-Value="from" class="border p-1 rounded" />
    </label>
    <label>
        To:
        <InputDate @bind-Value="to" class="border p-1 rounded" />
    </label>
    <button class="px-3 py-1 bg-blue-600 text-white rounded" @onclick="Load">
        Refresh
    </button>
</div>

<div class="grid grid-cols-2 gap-4">
  <table>
    <thead><tr><th>Date</th><th>Title</th><th>Type</th><th>Duration</th><th>Tags</th></tr></thead>
    <tbody>
      @foreach(var d in history)
      {
        <tr class="@((d.WasCancelled?"opacity-50":""))">
          <td>@d.CompletedAt.ToLocalTime().ToString("g")</td>
          <td><bold>@d.Title</bold></td>
          <td>@d.Type</td>
          <td>@d.Duration.ToString(@"hh\:mm\:ss")</td>
          <td>@string.Join(", ", d.Tags)</td>
        </tr>
      }    
    </tbody>
  </table>

  <table>
    <thead><tr><th>Date</th><th>Unit</th><th>XP</th><th>Loot</th><th>Result</th></tr></thead>
    <tbody>
      @foreach(var d in history)
      {
        <tr>
          <td>@d.CompletedAt.ToLocalTime().ToString("g")</td>
          <td>@d.UnitName</td>
          <td>@d.ExperienceGained</td>
          <td>@d.Loot</td>
          <td>@(d.WasCancelled? "❌ Cancel" : "✅")</td>
        </tr>
      }
    </tbody>
  </table>
</div>

@code {
    private List<QuestResult>? questResults;
    private bool showAll = false;
    private List<CalendarDay> CalendarDays = new();
    private List<List<CalendarDay>> Weeks = new();

    List<CompletedTaskDTO> history = new();
    DateTime from = DateTime.Today.AddDays(-30), to = DateTime.Today;
    TaskType? filterType = null;
    bool includeCancelled = false;
    DateTime filterStart, filterEnd;
    List<string> filterTags = new();

    protected override void OnInitialized()
    {
        filterEnd = DateTime.Today.AddDays(1).AddTicks(-1);
        filterStart = filterEnd.AddDays(-30);
        BuildCalendar();
        LoadHistory();
    }

    void Load()
    {
        var startOfDay = from.Date;
        // end‐of‐day: 23:59:59.999
        var endOfDay = to.Date.AddDays(1).AddTicks(-1);

        history = TaskService.GetHistory(
            startOfDay,
            endOfDay,
            filterType,
            filterTags,
            includeCancelled);
    }

    private void ToggleShowAll() => showAll = !showAll;

    void LoadHistory()
    {
        var query = Db.Tasks
          .Include(t => t.TaskTags).ThenInclude(tt => tt.Tag)
          .Include(t => t.QuestResults)         // if you link quests back to tasks
          .Where(t => t.LastCompletedAt != null
                   && t.LastCompletedAt >= filterStart
                   && t.LastCompletedAt <= filterEnd);
        var quest = Db.QuestResults
            .Include(r => r.Quest)
            .Include(r => r.Unit)
            .OrderByDescending(r => r.CompletedAt)
            .ToList();

        if (filterType.HasValue)
            query = query.Where(t => t.Type == filterType);

        if (filterTags.Any())
            query = query.Where(t => t.TaskTags.Any(tt => filterTags.Contains(tt.Tag.Name)));

        history = query
          .OrderByDescending(t => t.LastCompletedAt)
          .Select(t => new CompletedTaskDTO
          {
              CompletedAt = t.LastCompletedAt.Value,
              Title = t.Title,
              Type = t.Type,
              Duration = t.Type == TaskType.Timer
                               ? TimeSpan.FromMinutes(t.DurationMinutes)
                               : (t.LastCompletedAt.Value - t.StartedAt.Value),
              Tags = t.TaskTags.Select(tt => tt.Tag.Name).ToList(),
              ExperienceGained = t.QuestResults
                                .OrderByDescending(r => r.CompletedAt)
                                .Select(r => r.ExperienceGained)
                                .FirstOrDefault()             
          })
          .ToList();
    }

    private void BuildCalendar()
    {
        var end = DateTime.Today;
        var start = end.AddDays(-29);
        // Compute all days
        CalendarDays.Clear();
        for (var d = start; d <= end; d = d.AddDays(1))
        {
            CalendarDays.Add(new CalendarDay { Date = d });
        }
        // Fetch counts
        var allResults = Db.QuestResults.ToList();
        var counts = allResults
            .Where(q => q.CompletedAt.Date >= start && q.CompletedAt.Date <= end)
            .GroupBy(q => q.CompletedAt.Date)
            .ToDictionary(g => g.Key, g => g.Count());
        foreach (var day in CalendarDays)
        {
            if (counts.TryGetValue(day.Date, out var cnt))
                day.Count = cnt;
            else
                day.Count = 0;
        }

        // Build weeks aligned Monday
        Weeks.Clear();
        var week = new List<CalendarDay>();
        // Pad first week until Monday
        var firstWeekday = ((int)CalendarDays[0].Date.DayOfWeek + 6) % 7; // Monday=0
        for (int i = 0; i < firstWeekday; i++)
            week.Add(new CalendarDay { Date = default, Count = -1 });

        foreach (var day in CalendarDays)
        {
            week.Add(day);
            if (week.Count == 7)
            {
                Weeks.Add(week);
                week = new List<CalendarDay>();
            }
        }
        // Pad last week
        while (week.Count < 7)
            week.Add(new CalendarDay { Date = default, Count = -1 });
        Weeks.Add(week);
    }

    private string GetIntensity(int count)
    {
        if (count < 0) return "calendar-empty";
        if (count == 0) return "calendar-0";
        if (count == 1) return "calendar-1";
        if (count >= 5) return "calendar-5";
        if (count >= 3) return "calendar-3";
        return "calendar-2";
    }

    private class CalendarDay
    {
        public DateTime Date { get; set; }
        public int Count { get; set; }
    }

    private string GetColor(int count) => count switch
    {
        -1 => "transparent",    // padding cells
        0 => "#D1D5DB",         // gray-300
        1 => "#86EFAC",         // green-300
        >= 5 => "#166534",      // green-700
        >= 3 => "#059669",      // green-600
        _ => "#10B981"          // green-500
    };
}

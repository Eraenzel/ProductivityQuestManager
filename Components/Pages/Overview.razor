@page "/"
@rendermode InteractiveServer
@using ProductivityQuestManager.Data
@using Microsoft.EntityFrameworkCore;
@inject TaskManagerService TaskService
@implements IDisposable

<h2 class="text-xl font-bold mb-4">Overview</h2>

<div class="flex flex-col h-full">
    <!-- Top third: Active Task / Start form -->
    <section class="flex-none h-1/3 p-4 bg-white shadow-sm">
        @if (TaskService.ActiveTask != null)
        {
            <!-- show running task -->
            <h2 class="text-lg font-semibold">Working on:</h2>
            <p>@TaskService.ActiveTask.Title — @TaskService.GetTimeRemaining(TaskService.ActiveTask)</p>
            <button @onclick="TaskService.CancelActiveTask" class="mt-2 btn btn-sm btn-danger">Quit</button>
        }
        else
        {
            <!-- show start-new form -->
            <ProductivityQuestManager.Components.Pages.TaskList />
            <!-- your existing start task UI -->
            //<button @onclick="() => StartTask(Tasks.First())" class="btn btn-primary">Start First Task</button>
        }
    </section>

    <!-- Middle third: Calendar / History overview -->
    <section class="flex-1 p-4 bg-gray-50 overflow-auto">
        <ProductivityQuestManager.Components.Pages.TaskHistory />
        <!-- Placeholder for a calendar grid -->
        <div class="grid grid-cols-7 gap-1">
        </div>
    </section>

    <!-- Bottom third: Units list -->
    <section class="flex-none h-1/3 p-4 bg-white shadow-sm overflow-auto">
        <ProductivityQuestManager.Components.Pages.UnitManager />
        <div class="grid grid-cols-3 gap-4">
        </div>
    </section>
</div>

@code {
    private System.Timers.Timer? _refreshTimer;

    protected override void OnInitialized()
    {
        // Subscribe so that TaskService can push events too
        TaskService.OnChange += StateHasChanged;

        // Also start a 1 sec timer to force updates
        _refreshTimer = new System.Timers.Timer(1000);
        _refreshTimer.Elapsed += (s, e) => InvokeAsync(StateHasChanged);
        _refreshTimer.Start();
    }

    public void Dispose()
    {
        // Clean up both the service subscription and timer
        TaskService.OnChange -= StateHasChanged;
        _refreshTimer?.Stop();
        _refreshTimer?.Dispose();
    }
}

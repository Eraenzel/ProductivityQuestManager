@page "/"
@rendermode InteractiveServer
@using ProductivityQuestManager.Data
@using Microsoft.EntityFrameworkCore;
@inject TaskManagerService TaskService
@implements IDisposable
@inject IJSRuntime JS

<h2 class="text-xl font-bold mb-4">Overview</h2>

<div class="accordion" role="tablist">
    @* Start a Task *@
    <div class="accordion-item">
        <h3 class="accordion-header" @onclick="() => ToggleSection(Section.Tasks)">
            <button class="accordion-button @GetButtonClass(Section.Tasks)" type="button">
                🕒 Start a Task
            </button>
        </h3>
        <div class="accordion-collapse collapse @GetCollapseClass(Section.Tasks)">
            <div class="accordion-body">
                <!-- Your TaskList markup -->
                <ProductivityQuestManager.Components.Pages.TaskList />
            </div>
        </div>
    </div>

    @* Manage Tags *@
    <div class="accordion-item">
        <h3 class="accordion-header" @onclick="() => ToggleSection(Section.Tags)">
            <button class="accordion-button @GetButtonClass(Section.Tags)" type="button">
                🏷️ Manage Tags
            </button>
        </h3>
        <div class="accordion-collapse collapse @GetCollapseClass(Section.Tags)">
            <div class="accordion-body">
                <!-- Your TagManager markup -->
                <ProductivityQuestManager.Components.Pages.TagManager />
            </div>
        </div>
    </div>

    @* Task History *@
    <div class="accordion-item">
        <h3 class="accordion-header" @onclick="() => ToggleSection(Section.History)">
            <button class="accordion-button @GetButtonClass(Section.History)" type="button">
                📜 Task History
            </button>
        </h3>
        <div class="accordion-collapse collapse @GetCollapseClass(Section.History)">
            <div class="accordion-body">
                <!-- Your History markup -->
                <ProductivityQuestManager.Components.Pages.TaskHistory />
            </div>
        </div>
    </div>

    @* Your Units *@
    <div class="accordion-item">
        <h3 class="accordion-header" @onclick="() => ToggleSection(Section.Units)">
            <button class="accordion-button @GetButtonClass(Section.Units)" type="button">
                🛡️ Your Units
            </button>
        </h3>
        <div class="accordion-collapse collapse @GetCollapseClass(Section.Units)">
            <div class="accordion-body">
                <!-- Your Units markup -->
                <ProductivityQuestManager.Components.Pages.UnitManager />
            </div>
        </div>
    </div>
</div>

@code {
    private System.Timers.Timer? _refreshTimer;

    // Enum to identify each accordion section
    enum Section { None, Tasks, Tags, History, Units }

    // Track the currently open section
    Section active = Section.Tasks;

    void ToggleSection(Section s)
    {
        // If clicking the already open section, collapse it; otherwise open new
        active = active == s ? Section.None : s;
    }

    // CSS helper for the button: removes the default "collapsed" class when active
    string GetButtonClass(Section s) =>
        active == s ? "" : "collapsed";

    // CSS helper for the content div: adds Bootstrap's "show" when active
    string GetCollapseClass(Section s) =>
        active == s ? "show" : "";

    protected override void OnInitialized()
    {
        // Subscribe so that TaskService can push events too
        TaskService.OnChange += StateHasChanged;

        // Also start a 1 sec timer to force updates
        _refreshTimer = new System.Timers.Timer(1000);
        _refreshTimer.Elapsed += (s, e) => InvokeAsync(StateHasChanged);
        _refreshTimer.Start();
    }

    public void Dispose()
    {
        // Clean up both the service subscription and timer
        TaskService.OnChange -= StateHasChanged;
        _refreshTimer?.Stop();
        _refreshTimer?.Dispose();
    }
}

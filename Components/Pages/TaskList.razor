@page "/list"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms
@using ProductivityQuestManager.Data
@inject TaskManagerService TaskService
@implements IDisposable

@TaskService.ActiveTask
@* running timer, if there is one *@
@if (TaskService.ActiveTask is { } running)
{
    <div class="mb-4 p-4 bg-yellow-100 rounded flex items-center space-x-4">
        <div class="flex-1">
            <strong>Task at hand:</strong> @running.Title<br>
            @if (TaskService.ActiveTask.Type == TaskType.Timer)
            {
				<span>@TaskService.GetTimeRemaining(TaskService.ActiveTask)</span><br />
		
				<button class="btn btn-danger" @onclick="StopCurrentTask">■ Cancel</button>
                <button class="mt-2 px-4 py-1 bg-green-600 text-white rounded"
                        @onclick="async () => await TaskService.Debug_ForceCompleteActiveTask()">
                    (Debug)Force Complete
                </button>
            }
            else
            {			    
                <span>
                    @(TaskService.GetActiveTimerElapsed().ToString(@"hh\:mm\:ss")) Elapsed
                </span><br />
                <button class="btn btn-danger" @onclick="StopCurrentTask">Finish Now</button>
            } 
        </div>        
    </div>
}

@* start a task *@
<h2 class="text-xl font-bold mb-4">Start a Task</h2>
@if (TaskService.Tasks == null)
{
    <p>Loading tasks...</p>
}
else if (!TaskService.Tasks.Any())
{
    <p>No tasks found.</p>
}
else
{
    <ul class="space-y-3">

        @* available tasks *@   
        @foreach (var task in TaskService.Tasks)
        {

           var isDisabled = TaskService.ActiveUnit == null || TaskService.ActiveTask != null;

                <li class="border p-3 rounded bg-white shadow">
                
                    @if (TaskService.ActiveUnit == null)
                    {
                        <p class="text-sm text-red-500">No unit selected.</p>
                    }

                    @if (editingId == task.Id)
                    {
                    <input @bind="editTitle" /><br />
                    <input type="number" @bind="editDuration" /><br />
                    <input type="text"
                           list="tag-options"
                           class="border p-2 rounded"
                           placeholder="Add or select tag…"
                           @bind="tagInput" />
                    <datalist id="tag-options">
                        @foreach (var t in allTags)
                        {
                            <option value="@t.Name" />
                        }
                    </datalist>
                    <button class="px-2 py-1 bg-gray-200 rounded" @onclick="AddTag">+ Tag</button>

                    @* Chips of selected tags *@
                    @foreach (var t in selectedTags)
                    {
                        <span class="inline-flex items-center bg-blue-200 text-blue-800 px-2 py-0.5 rounded mr-1 text-xs">
                            @t.Name
                            <button class="ml-1 text-xs" @onclick="() => RemoveTag(t)">×</button>
                        </span>
                    }<br />
                    <button @onclick="() => SaveEdit(task.Id)">💾</button>
                    <button @onclick="CancelEdit">✖️</button><br />
                    }
                    else
                    {
                        <strong>@task.Title</strong>
                        @foreach (var tt in task.TaskTags)
                        {
                            <span class="inline-block bg-blue-200 text-blue-800 px-2 py-0.5 rounded mr-1 text-xs">
                                @tt.Tag.Name
                            </span>
                        } <br />
				        <p>Duration: @task.DurationMinutes minutes</p>
                    }
                <button class="btn btn-primary"
                        @onclick="() => StartTask(task, TaskType.Timer)"
                        disabled="@(TaskService.ActiveUnit == null || TaskService.ActiveTask != null || editingId != null)">
                    ▶ Timer
                </button>
                <button class="px-4 py-2 bg-blue-600 text-white rounded"
                        @onclick="() => StartTask(task, TaskType.Tracker)"
                        disabled="@(TaskService.ActiveUnit == null || TaskService.ActiveTask != null || editingId != null)">
                    ▶ Tracker
                </button>


                <button class="btn btn-danger" @onclick="() => TaskService.DeleteTask(task)"
                        disabled="@((TaskService.ActiveTask != null && TaskService.ActiveTask.Id == task.Id || editingId != null))">
                    🗑 Delete
                </button>
                <button class="px-4 py-2 bg-blue-600 text-white rounded" @onclick="() => BeginEdit(task)"
                        disabled="@((TaskService.ActiveTask != null && TaskService.ActiveTask.Id == task.Id || editingId != null))">
                    Edit
                </button>
                </li>                
        }
    </ul>
    @if (editingId == null)
    {
        <h3 class="mt-6 font-semibold text-lg">➕ Add New Task</h3>
            <div class="mt-2 space-y-2">
                <input type="text" placeholder="Task title" class="border p-2 rounded w-64" @bind="newTaskTitle" />
                <input type="number" placeholder="Duration (min)" class="border p-2 rounded w-32" @bind="newTaskDuration" />
            @* Tag picker *@
            <input type="text"
                   list="tag-options"
                   class="border p-2 rounded"
                   placeholder="Add or select tag…"
                   @bind="tagInput" />
            <datalist id="tag-options">
                @foreach (var t in allTags)
                {
                    <option value="@t.Name" />
                }
            </datalist>
            <button class="px-2 py-1 bg-gray-200 rounded" @onclick="AddTag">+ Tag</button>

            @* Chips of selected tags *@
            @foreach (var t in selectedTags)
            {
                <span class="inline-flex items-center bg-blue-200 text-blue-800 px-2 py-0.5 rounded mr-1 text-xs">
                    @t.Name
                    <button class="ml-1 text-xs" @onclick="() => RemoveTag(t)">×</button>
                </span>
            }
                <button class="px-4 py-1 bg-blue-500 text-white rounded" @onclick="AddTask">Add Task</button>
            </div>
    }
    
    <p class="mt-4 text-blue-600 font-semibold">@statusMessage</p>
}

<div class="transition-opacity quest-result"
     style="@(TaskService.LastResult != null
                                   ? "opacity: 1; max-height: 1000px; margin-top: 1rem;"
                                   : "opacity: 0; max-height: 0; overflow: hidden; margin-top: 0;")">
    @if (TaskService.LastResult != null)
    {
        <div class="p-4 border border-green-500 bg-green-100 rounded">
            <h3 class="text-lg font-semibold">✅ Quest Completed!</h3>
            <p><strong>Unit:</strong> @TaskService.LastResult.Unit?.Name</p>
            <p><strong>XP Gained:</strong> @TaskService.LastResult.ExperienceGained</p>
            <p><strong>Loot:</strong> @TaskService.LastResult.Loot</p>
            <p><strong>Summary:</strong> @TaskService.LastResult.OutcomeSummary</p>
            <button class="mt-2 px-4 py-1 bg-green-500 text-white rounded"
                    @onclick="() => TaskService.ClearResult()">
                Close
            </button>
        </div>
    }
</div>

@code {
    private string statusMessage = "";

    private string newTaskTitle = "";
    private int newTaskDuration = 5;
    private System.Timers.Timer? refreshTimer;

    private string tagInput = "";
    private List<Tag> allTags = new();
    private List<Tag> selectedTags = new();

    private int? editingId;
    private bool IsEditing => editingId.HasValue;
    private int editDuration;

    private string editTitle = "";
    private string saveError = "";

    protected override void OnInitialized()
    {
        allTags = TaskService.GetAllTags();

        TaskService.OnChange += StateHasChanged;

        // Trigger full UI update just in case
        InvokeAsync(StateHasChanged);

        // Start local timer to force refresh every second
        refreshTimer = new System.Timers.Timer(1000); // 1 second
        refreshTimer.Elapsed += (sender, e) => InvokeAsync(StateHasChanged);
        refreshTimer.Start();
    }

    private async Task StartTask(TaskModel task, TaskType type)
    {
        if (TaskService.ActiveUnit == null)
        {
            statusMessage = "No unit selected.";
            return;
        }      

        await TaskService.StartTaskAsync(task, selectedTags.Select(t => t.Name), type);
    }

    private async Task StopCurrentTask()
    {
        await TaskService.StopTaskAsync();
    }

    private void AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle) || newTaskDuration <= 0)
        {
            statusMessage = "Enter valid title and duration.";
            return;
        }

        TaskService.AddTask(newTaskTitle, newTaskDuration, selectedTags.Select(t => t.Name));
        newTaskTitle = "";
        selectedTags.Clear();
        newTaskDuration = 5;
    }

    public void Dispose()
    {
        TaskService.OnChange -= StateHasChanged;

        // Clean up
        refreshTimer?.Stop();
        refreshTimer?.Dispose();
    }

    private bool CanStart(TaskModel task)
    {
        var canStart = TaskService.ActiveUnit != null
                  && TaskService.ActiveTask == null;

        return canStart;
    }

    private void AddTag()
    {
        var name = tagInput?.Trim();
        if (string.IsNullOrEmpty(name)) return;

        TaskService.AddTagIfNotExists(name);
        allTags = TaskService.GetAllTags();

        var tag = allTags.FirstOrDefault(t => t.Name == name);
        if (tag != null && selectedTags.All(t => t.Id != tag.Id))
            selectedTags.Add(tag);

        tagInput = "";
    }

    private void RemoveTag(Tag t) => selectedTags.Remove(t);

    private void BeginEdit(TaskModel e)
    {
        editingId = e.Id;
        editTitle = e.Title;
        editDuration = e.DurationMinutes;
        saveError = "";
        selectedTags = e.TaskTags.Select(t => t.Tag).ToList();
    }

    private void CancelEdit()
    {
        editingId = null;
        selectedTags.Clear();
    }

    private void SaveEdit(int id)
    {
        if (editDuration <= 0)
        {
            saveError = "❌ Invalid duration.";
            return;
        }

        saveError = "";
        TaskService.UpdateTask(id, editTitle, editDuration, selectedTags.Select(t => t.Name));
        TaskService.AssignTagsToTask(id, selectedTags.Select(t => t.Name));
        editingId = null;
        selectedTags.Clear();
    }
    
}

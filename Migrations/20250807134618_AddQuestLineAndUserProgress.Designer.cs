// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductivityQuestManager.Data;

#nullable disable

namespace ProductivityQuestManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250807134618_AddQuestLineAndUserProgress")]
    partial class AddQuestLineAndUserProgress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ProductivityQuestManager.Data.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.QuestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExperienceGained")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Loot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OutcomeSummary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaskModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.HasIndex("TaskModelId");

                    b.HasIndex("UnitId");

                    b.ToTable("QuestResults");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastCompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.TaskTag", b =>
                {
                    b.Property<int>("TaskModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskModelId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TaskTags");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceToNextLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnQuest")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("PreferredCategories")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.QuestResult", b =>
                {
                    b.HasOne("ProductivityQuestManager.Data.Quest", "Quest")
                        .WithMany("Results")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityQuestManager.Data.TaskModel", "TaskModel")
                        .WithMany("QuestResults")
                        .HasForeignKey("TaskModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProductivityQuestManager.Data.Unit", "Unit")
                        .WithMany("QuestResults")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("TaskModel");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.TaskTag", b =>
                {
                    b.HasOne("ProductivityQuestManager.Data.Tag", "Tag")
                        .WithMany("TaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityQuestManager.Data.TaskModel", "TaskModel")
                        .WithMany("TaskTags")
                        .HasForeignKey("TaskModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TaskModel");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.Quest", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.Tag", b =>
                {
                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.TaskModel", b =>
                {
                    b.Navigation("QuestResults");

                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("ProductivityQuestManager.Data.Unit", b =>
                {
                    b.Navigation("QuestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
